Things that are noted as an issue, problem or wanted feature at some
level typically also must be handled at lower levels (language
features for example must also be lexed, parsed, ASTed, CodeGen'd and
have backend support).


Language:
---------
Syntax for Tuples. Are they any different from statically-sized arrays?
Literals for Vector (and eventually tuples)?
Mechanism for including application libs/constrained interfaces: Require?
Figure out how to do "Require Implicit", "Require 2D", "Require
Cartesian", "Require Twophase", "Require PorousMedia" or similar things.
Allow assigning functions to variables? Should be allowed.
Functions as first-order objects?
Function templates and instantiation:
-> instantiation means: fixing types of a template
-> codegen typically emits function at instantiation
-> a function (instantiated, typed) is a type that can be passed etc.
-> a function template cannot be passed as an argument (but consider
ok for other templates).
-> is this sufficiently strong and simple for easy use with NewtonSolve()
Let |.| be absolute value for Scalar.

Lexer/Grammar:
--------------
Tuples (also needs work in parser etc.)
Check and fix multi-argument functions.
Give nice error messages when user tries to define var or func with
capital letter.


Parsing, type checking and building AST:
----------------------------------------
Make all parse actions $$ = handleSomething().
Make all such handleSomething() functions do type checking.
Make Node::type() pure virtual?
Add ExpressionNode class, move type() there, add to %union?
Type checking of function args at call site? Relate to instantiation?
Type check return statements.
Ensure single return statement, at the end of each function.
Function types vs. variable types?
Check that variables used have been assigned.
Can we use smart pointers in the AST nodes?


Code generation, processing of AST:
-----------------------------------
Consider tracing AD requirement through program instead of
making all functions take AD types as currently done.
How to support explicit and implicit methods in single program, which
would require both AD and non-AD types for functions? Current approach
is that all is AD, workable?

Backend:
--------
Complete current backend (several builtins not implemented).
Investigate why auto fails with Eigen expr. templates.
Parallel backend.


Simulator prototypes:
---------------------
Incomp 2p sim
CO2 sim
Shallow water sim

