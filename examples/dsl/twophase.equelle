# Two-phase flow with no-flow boundary and simple source terms.

# Physics that requires specification
perm : Collection Of Scalar On AllCells()
perm = UserSpecifiedCollectionOfScalar("perm", AllCells())
poro : Collection Of Scalar On AllCells()
poro = UserSpecifiedCollectionOfScalar("poro", AllCells())
watervisc = UserSpecifiedScalarWithDefault("watervisc", 0.0005)
oilvisc = UserSpecifiedScalarWithDefault("oilvisc", 0.005)

# Constants
vol = |AllCells()|

# Computing transmissibilities. Note: we should check algorithm agains MRST and OPM.
computeTransmissibilities : Function(permeability : Collection Of Scalar On AllCells()) -> Collection Of Scalar On InteriorFaces()
computeTransmissibilities(permeability) = {
    interior_faces = InteriorFaces()
    first = FirstCell(interior_faces)
    second = SecondCell(interior_faces)
    cdiff1 = Centroid(first) - Centroid(interior_faces)
    cdiff2 = Centroid(second) - Centroid(interior_faces)
    p1 = permeability On first
    p2 = permeability On second
    a = |interior_faces|
    halftrans1 = a * p1 * Dot(Normal(interior_faces), cdiff1) / Dot(cdiff1, cdiff1)
    halftrans2 = a * p2 * Dot(Normal(interior_faces), cdiff2) / Dot(cdiff2, cdiff2)
    trans = 1.0 / (1.0/halftrans1 + 1.0/halftrans2)
    -> trans
}

# Actually compute transmissibilities.
trans = computeTransmissibilities(perm)

# Upwind selection.
upwind : Function(flux : Collection Of Scalar On InteriorFaces(), ...
                  x    : Collection Of Scalar On AllCells()) ...
                  -> Collection Of Scalar On InteriorFaces()
upwind(flux, x) = {
    x1 = x On FirstCell(InteriorFaces())
    x2 = x On SecondCell(InteriorFaces())
    -> flux >= 0.0 ? x1 : x2
}

# Total fluxes
computeTotalFluxes : Function(pressure : Collection Of Scalar On AllCells(), ...
                              total_mobility : Collection Of Scalar On AllCells()) ...
                              -> Collection Of Scalar On InteriorFaces()
computeTotalFluxes(pressure, total_mobility) = {
    ngradp = -Gradient(pressure)
    face_total_mobility = upwind(ngradp, total_mobility)
    -> trans * face_total_mobility * ngradp
}

# Pressure residual
computePressureResidual : Function(pressure : Collection Of Scalar On AllCells(), ...
                                   total_mobility : Collection Of Scalar On AllCells(), ...
                                   source : Collection Of Scalar On AllCells()) ...
                                   -> Collection Of Scalar On AllCells()
computePressureResidual(pressure, total_mobility) = {
    fluxes = computeTotalFluxes(pressure, total_mobility)
    -> Divergence(fluxes) - source
}

# Water mobility
computeWaterMob : Function(sw : Collection Of Scalar On AllCells()) ...
                           -> Collection Of Scalar On AllCells()
computeWaterMob(sw) = {
    krw = sw
    -> krw / watervisc
}

# Oil mobility
computeOilMob : Function(sw : Collection Of Scalar On AllCells()) ...
                         -> Collection Of Scalar On AllCells()
computeOilMob(sw) = {
    kro = (1.0 Extend AllCells()) - sw
    -> kro / oilvisc
}

# Transport residual
computeTransportResidual : Function(sw : Collection Of Scalar On AllCells(), ...
                                    sw0 : Collection Of Scalar On AllCells(), ...
                                    fluxes : Collection Of Scalar On InteriorFaces(), ...
                                    source : Collection Of Scalar On AllCells(), ...
                                    insource_sw : Collection Of Scalar On AllCells(), ...
                                    dt : Scalar) ...
                                    -> Collection Of Scalar On AllCells()
computeTransportResidual(sw, sw0, fluxes, source, insource_sat, dt) = {
    insource = source > 0.0 ? source : 0.0 Extend AllCells()
    outsource = source < 0.0 ? source : 0.0 Extend AllCells()
    mw = computeWaterMob(sw)
    mo = computeOilMob(sw)
    f = mw / (mw + mo)
    f_face = upwind(fluxes, f)
    w_fluxes = f_face * fluxes
    q = insource * insource_sw + outsource * f
    -> sw - sw0 + (dt/vol) * Divergence(w_fluxes) - q
}

# Initialise state variables.
timesteps = UserSpecifiedSequenceOfScalar("timesteps")
sw_initial = UserSpecifiedCollectionOfScalar("sw_initial", AllCells())
source_cells = UserSpecifiedCollectionOfCellSubsetOf("source_cells", AllCells())
source_values = UserSpecifiedCollectionOfScalar("source_values", source_cells)
source = source_values Extend AllCells()
insource_sw = 1.0 Extend AllCells()
sw0 : Mutable Collection Of Scalar On AllCells()
sw0 = sw_initial
p0 : Mutable Collection Of Scalar On AllCells()
p0 = 0.0 Extend AllCells()

# Output initial solution
Output("pressure", p0)
Output("saturation", sw0)

# Main timestepping loop.
For dt In timesteps {
    # Compute flux.
    total_mobility = computeWaterMob(sw0) + computeOilMob(sw0)
    pressureResLocal : Function(pressure : Collection Of Scalar On AllCells()) -> Collection Of Scalar On AllCells()
    pressureResLocal(pressure) = {
        -> computePressureResidual(pressure, total_mobility, source)
    }
    p = NewtonSolve(pressureResLocal, p0)
    fluxes = computeTotalFluxes(p, total_mobility)

    # Compute saturation.
    transportResLocal : Function(sw : Collection Of Scalar On AllCells()) -> Collection Of Scalar On AllCells()
    transportResLocal(sw) = {
        -> computeTransportResidual(sw, sw0, fluxes, source, insource_sw, dt)
    }
    sw = NewtonSolve(transportResLocal, sw0)

    # Update state variables
    p0 = p
    sw0 = sw

    # Output new solution
    Output("pressure", p0)
    Output("saturation", sw0)
}































