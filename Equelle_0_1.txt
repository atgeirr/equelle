The purpose of this document is to describe and specify Equelle
sufficiently accurate and complete that a first version of a compiler can
be produced. This is not a definitive specification, recent example
programs will have to be consulted for a more complete picture.

Since this document is not meant to be used as input for a
compiler-generator, parser, etc., it is written in natural language.

At the time of writing (2013.08.02) this will actually be in the form of
an example collection.




1. Types
--------

The following types exist in Equelle:


a. Basic numeric types.

   Scalar    --   a single number, typically a double-precision floating-point number
   Vector    --   a (geometric) vector, with one number for each dimension (typically 2 or 3)


b. Entities (basic topological, grid-related types).

   Cell      --   a single cell of the computational grid (entity of dimension == world dimension)
   Face      --   a single face
   Edge      --   a single edge
   Vertex    --   a single vertex

For 2d grids, Face == Edge. For 1d grids, Face == Edge == Vertex.
An entity can be Empty.


c. Entity collections.

   Collection Of <Entity>  --  contains zero or more elements that are instances of <Entity>
   Collection Of <Entity> Subset Of (Collection Of <Entity> 1, Collection Of <Entity> 2, ...)
   --  this collection is a subset of one or more indicated collections


d. Collections mapped to entity collections.

   Collection Of <Type> On <Collection Of Entity>
   --  contains zero or more elements that are instances of <Type>,
       one for each element in <Collection Of Entity>.

Note that mapped collections can also contain entities.  Also, there can be a whole chain of
mappings: A On B On C On D.  A Collection Of <Entity> On <X> is also a Collection Of <Entity> and
can be treated as such.  We propose that user code mostly manipulates mapped collections, since that
facilitates correctness checks.

Note that a type '<Entity|Basic numeric type> On Collection ...' is not allowed.  If one intend to
have one element shared among all members of a collection, one should use '<Entity|Basic numeric
type>'. If one intend to have one element associated 1-1 on all members of a collection, one should
use 'Collection Of <Entity|Basic numeric type> On Collection ...'. In this version, a collection
mapped to each element of a collection is not supported. A probable future syntax for this would be
'Collection Of (Collection Of ...) On ...'

Note that a "deduced type" is the most restrictive, if more than one are possible types. (@jny How
to best express this?) E.g.: The deduced type of InteriorFaces() is 'Collection Of Face On
InteriorFaces()', and not 'Collection Of Face on AllFaces()', even though a variable of the latter
type can be assigned the value of InteriorFaces() with the help of the Super function, see below.


e. Functions.

   Function(arg1 : Type1, arg2 : Type2, ...) -> Return type

Note that a function given without explicit type declaration should be treated as a
template, and its types deduced at the instantiation point if possible.


f. Boolean type

   Bool      --   a flag, which is True or False


g. Type conversions

No automatic type promotion is done, e.g.,

   c1 : Collection Of Vector On AllFaces() = Centroid(FirstCell(interior_faces))

is not allowed. Correct explicit declarations are,

   c2 : Collection Of Vector On interior_faces = Centroid(FirstCell(interior_faces))
   c3 : Collection Of Vector On InteriorFaces() = Centroid(FirstCell(interior_faces))

assuming that interior_faces = InteriorFaces().

For collections of basic numeric types, the collection can be extended
(with zero values) to a larger set using On, as follows:

   c4 : Collection Of Vector On AllFaces() = c3 On AllFaces()

This requires that the argument to On is a superset of the set c2 is On.
The converse subset operation is also written using On:

   c5 : Collection Of Vector On InteriorFaces() = c4 On InteriorFaces()

After this, c5 is identical to c3. This operation require that the
argument to On is a subset of the set c4 is On.

It is also allowed to convert a scalar or vector to a collection using On:
   x : Scalar = 1.234
   c6 : Collection Of Scalar On BoundaryCells() = x On BoundaryCells()
However, the need for this should be minor, since this behaviour is implicit
with all operators that take scalars and collections.


h. Tuples

Tuples of homogenous type can be created as follows.
   t : Tuple Of (Collection Of Vector On InteriorFaces()) = (c2, c3, c5)
Then the individual parts can be (read-only) accessed as t[0], t[1], t[2].


2. Notation for type declarations and examples of types
-------------------------------------------------------

General notation is "variable_name : Type".

a_constant : Scalar
start_point : Vector
acceleration : Vector
a_cell : Cell
all_faces : Collection Of Face
some_faces : Collection Of Face # Subset Of (all_faces)
a_value_per_face_in_some_faces : Collection Of Scalar # On some_faces
computeTransmissibilities : Function(faces_arg : Collection Of Face) -> Collection Of Scalar # On faces_arg




3. Built-in functions
---------------------


a. User specified quantities
UserSpecifiedScalar : Function() -> Scalar
UserSpecifiedScalarWithDefault : Function(default : Scalar) -> Scalar
UserSpecifiedCollectionOfScalar : Function(entities : Collection Of <Entity>) -> Collection Of Scalar On entities


b. Grid related
AllCells : Function() -> Collection Of Cell
BoundaryCells : Function() -> Collection Of Cell Subset Of AllCells()
InteriorCells : Function() -> Collection Of Cell Subset Of AllCells()
AllFaces : Function() -> Collection Of Face
BoundaryFaces : Function() -> Collection Of Face Subset Of AllFaces()
InteriorFaces : Function() -> Collection Of Face Subset Of AllFaces()
AllEdges : Function() -> Collection Of Edge
BoundaryEdges : Function() -> Collection Of Edge Subset Of AllEdges()
InteriorEdges : Function() -> Collection Of Edge Subset Of AllEdges()
AllVertices : Function() -> Collection Of Vertex
BoundaryVertices : Function() -> Collection Of Vertex Subset Of AllVertices()
InteriorVertices : Function() -> Collection Of Vertex Subset Of AllVertices()
# Each face has an orientation from its FirstCell to its SecondCell.
# If a face is on the boundary, either FirstCell or SecondCell is Empty.
FirstCell : Function(f : Collection Of Face) -> Collection Of Cell On f
SecondCell : Function(f : Collection Of Face) -> Collection Of Cell On f
Centroid : Function(e : Collection Of <Entity>) -> Collection Of Vector On e
Normal : Function(f : Collection Of Face) -> Collection Of Vector On f
IsEmpty : Function(e : Collection Of <Entity>) -> Collection Of Boolean On e


c. Discrete operators
Gradient : Function(values : Collection Of Scalar On AllCells()) -> Collection Of Scalar On InteriorFaces()
Divergence : Function(values : Collection Of Scalar On InteriorFaces()) -> Collection Of Scalar On AllCells()
Divergence : Function(values : Collection Of Scalar On AllFaces()) -> Collection Of Scalar On AllCells()


d. Other functions
Dot : Function(v1 : Collection Of Vectors On <X>, v2 : Collection Of Vectors On <X>) -> Collection Of Scalar On <X>
EuclideanLength : Function(v : Collection Of Vectors On <X>) -> Collection Of Scalar On <X>
|<X>|: Function(entities : Collection of <Entity>) ->  Collection of Scalar on entities
### The |...| notation is intended to solve the dimensionality issue by giving
### a notation for "natural size" of elements. Length of vectors, area of faces,
### volume of cells etc. 

e. Arithmetic operators.
+
-
*
/
All of these share the signature:
op : Function(v1 : Collection Of Scalar On <X>, v2 : Collection Of Scalar On <X>) -> Collection Of Scalar On <X>
Some additional overloads for ease of use with Vector and Scalar types:
+ : Function(v1 : Collection Of Vector On <X>, v2 : Collection Of Vector On <X>) -> Collection Of Vector On <X>
- : Function(v1 : Collection Of Vector On <X>, v2 : Collection Of Vector On <X>) -> Collection Of Vector On <X>
* : Function(v1 : Collection Of Vector On <X>, v2 : Collection Of Scalar On <X>) -> Collection Of Vector On <X>
* : Function(v1 : Collection Of Scalar On <X>, v2 : Collection Of Vector On <X>) -> Collection Of Vector On <X>
/ : Function(v1 : Collection Of Vector On <X>, v2 : Collection Of Scalar On <X>) -> Collection Of Vector On <X>
^ : Function(v1 : Collection Of Scalar On <X>, exponent : Scalar) -> Collection Of Scalar On <X>
Unary negation:
- : Function(v : Collection Of Scalar On <X>) -> Collection Of Scalar On <X>
- : Function(v : Collection Of Vector On <X>) -> Collection Of Vector On <X>
"? :" : Function(predicate : Collection Of Bool On <X>, iftrue : Collection Of Scalar On <X>, iffalse : Collection Of Scalar On <X>) -> Collection Of Scalar On <X>
"? :" : Function(predicate : Collection Of Bool On <X>, iftrue : Collection Of Vector On <X>, iffalse : Collection Of Vector On <X>) -> Collection Of Vector On <X>
> : Function(v1 : Collection Of Scalar On <X>, v2 : Collection Of Scalar On <X>) -> Collection Of Bool On <X>
< : Function(v1 : Collection Of Scalar On <X>, v2 : Collection Of Scalar On <X>) -> Collection Of Bool On <X>
And : Function(v1 : Collection Of Bool On <X>, v2 : Collection Of Bool On <X>) -> Collection Of Bool On <X>
Or : Function(v1 : Collection Of Bool On <X>, v2 : Collection Of Bool On <X>) -> Collection Of Bool On <X>
Not : Function(v : Collection Of Bool On <X>) -> Collection Of Bool On <X>
### Forgotten: ops with Scalar and Collection Of Scalar etc.
### Min, Max, Abs, CloseTo, Round, Ceil, Floor, Integer type, modulus and integer ops.

f. Specially treated constructs
NewtonSolve : Function( compute_residual : Function(u : Collection Of Scalar On <X>) -> Collection Of Scalar On <X>,
                        initial_guess    : Collection Of Scalar On <X>)
                        -> Collection Of Scalar On <X>
Output




4. Notation for assignment/construction
---------------------------------------

a. Variables.

<variable name> = <expression>

or

<variable name> : <type specification> = <expression>

or

<variable name> : <type specification>
<variable name> = <expression>


b. Functions

<function name> = {
   ...
}

(such a function is treated as a template and is typechecked at instantiation)

or

<function name> : <type specification> = {
   ...
}

or

<function name> : <type specification>
<function name> = {
   ...
}
