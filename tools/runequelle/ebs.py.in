#!/usr/bin/python

import argparse
import subprocess
import os

runequelleroot = "@CMAKE_INSTALL_PREFIX@/shared/equelle/"
eccompiler = ["@CMAKE_INSTALL_PREFIX@/bin/ec"]
builddir = "build"

def genSimulatorName(source):
    return os.path.basename(os.path.splitext(source)[0])

def genCppFileName(source):
    return genSimulatorName(source) + ".cpp"

def compileEquelle(source):
    with open(source) as f:
        with open(builddir + "/" + genCppFileName(source), 'w') as o:
            subprocess.call(eccompiler, stdin=f, stdout=o)

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = newPath

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)

def createBuildDir(builddir):
    try:
        os.makedirs(builddir)
    except OSError:
        if not os.path.isdir(builddir):
            raise

def compileCpp(source):
    with cd(builddir):
        subprocess.call(["cmake", runequelleroot, "-DSIMULATOR_SOURCE_FILE=" + genCppFileName(source),
                                                  "-DSIMULATOR_EXEC_FILE=" + genSimulatorName(source),
                                                  "-DCMAKE_PREFIX_PATH=@CMAKE_INSTALL_PREFIX@"])
        subprocess.call(["make"])

def runSimulator(source, params):
    subprocess.call([builddir + "/" + genSimulatorName(source), params])

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Execute equelle programs")
    parser.add_argument("source", help="Equelle source file")
    parser.add_argument("params", help="Simulator parameters")

    args = parser.parse_args()

    print args.source
    print args.params

    createBuildDir(builddir)
    compileEquelle(args.source)
    compileCpp(args.source)
    runSimulator(args.source, args.params)
