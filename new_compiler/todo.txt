Things that are noted as an issue, problem or wanted feature at some
level typically also must be handled at lower levels (language
features for example must also be lexed, parsed, ASTed, CodeGen'd and
have backend support).


Language:
---------
Loops, for the ability to do more timesteps.
- Current suggested notation:
  For loop_var In some_sequence {
      ... use loop_var ...
  }
- New type: Sequence Of <basic type> (for things that must be looped
  over in order)
Related to the above: mutable variables? Other ways?
- Current suggestion: allow vars to be declared Mutable
  (unlike regular immutables, Mutable vars MUST be declared)
Nested function/loop scopes. What is allowed?
- no function in function scopes, all else ok. Implementable? Perhaps
  not easily?
Literals for Vector (and eventually tuples)?
Allow assigning functions to variables? Should be allowed.
Functions as first-order objects?
Use Restrict and Prolong for On in 'a On b' expressions?
Add reductions such as 'Sum : Function(Collection Of Scalar) -> Scalar'.
Mechanism for including application libs/constrained interfaces: Require?
What happens with On and sets containing an entity multiple times?
-> accept for restriction only and not for prolongation?
-> what does Subset Of mean?
Separate On into Restrict and Prolong?
Function templates and instantiation:
-> instantiation means: fixing types of a template
-> codegen typically emits function at instantiation
-> a function (instantiated, typed) is a type that can be passed etc.
-> a function template cannot be passed as an argument (but consider
ok for other templates).

Lexer/Grammar:
--------------
Line continuation ('...').
Tuples (also needs work in parser etc.)
Check and fix multi-argument functions.


Parsing, type checking and building AST:
----------------------------------------
Make all parse actions $$ = handleSomething().
Make all such handleSomething() functions do type checking.
Make Node::type() pure virtual?
Add ExpressionNode class, move type() there, add to %union?
Type checking of function args at call site.
Type check return statements.
Ensure single return statement, at the end of each function.
Make the "subset of" part of all entity collection types?
Add all created (named or not?) entity sets to symbol table?
Function types vs. variable types?
Check that variables used have been assigned.


Code generation, processing of AST:
-----------------------------------
Consider emitting inner class with template operator() instead of two
lambdas for each function (AD/non-AD).

Backend:
--------
Complete current backend.
Investigate why auto fails with Eigen expr. templates.
Parallel backend.


Simulator prototypes:
---------------------
Incomp 2p sim
CO2 sim
Shallow water sim

